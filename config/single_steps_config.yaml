sort_pull:
    # Dir containing target BAMs (include slash at end)
    bam_spot: /SAN/vyplab/alb_projects/data/ward_bams/bam_files/

    bam_suffix: .pass2Aligned.sortedByCoord.out.bam

    # output dir for name sorted bam files. Usually these files are temporary, so set to wherever have space if don't want to keep
    name_sort_outspot: /SAN/vyplab/alb_projects/data/ward_bams/pulled_fastq/

    # output dir for fastq files
    out_spot: /SAN/vyplab/alb_projects/data/ward_bams/pulled_fastq/

    # paired end or single end FASTQs? ("pe" for paired end, anything else for single end ("se" is sensible))
    end_type: "pe"

    bedtools_path: /SAN/vyplab/alb_projects/tools/bedtools

    samtools_path: /share/apps/genomics/samtools-1.9/bin/samtools

stringtie_longreads:
    # Dir when bams to quant are stored (include slash at end)
    # Sample wildcards will be globbed from here
    bam_spot: /SAN/vyplab/alb_projects/data/nanopore_tdp_kd_ipsc/dec_2020/bam_links/

    bam_suffix: .reads.sanitize.noribo.toGenome.sorted.uxi.bam

    out_spot: /SAN/vyplab/alb_projects/data/nanopore_tdp_kd_ipsc/dec_2020/2021-03-17_stringtie/

    gtf: /SAN/vyplab/vyplab_reference_genomes/annotation/human/ensembl/Homo_sapiens.GRCh38.100.gtf

    gtfmerge: /SAN/vyplab/alb_projects/tools/rnaseqtools-1.0.3/gtfmerge/gtfmerge

    gffcompare: /SAN/vyplab/alb_projects/tools/gffcompare-0.11.6.Linux_x86_64/gffcompare

    gtfcuff: /SAN/vyplab/alb_projects/tools/rnaseqtools-1.0.3/gtfcuff/gtfcuff


feature_counts:
    # if you're using a SAF
    gtf_used: False
    saf:  /SAN/vyplab/NYGC_ALSFTD/analysis_nygc/extensions.saf

    # Path to directory where results should be output (include slash at end)
    out_spot: /SAN/vyplab/NYGC_ALSFTD/analysis_nygc/utr_extensions_counts/


    # Dir when bams to quant are stored (include slash at end)
    bam_spot: /SAN/vyplab/NYGC_ALSFTD/linked_als_bams/


    # Pick out bams from bam_dir with this bam_suffix
    # Also used to strip from file to get sample name
    # e.g. Cont-B_S2.pass2Aligned.sortedByCoord.out.bam becomes Cont-B_S2
    bam_suffix: ".bam"

    # Path to GTF file of genes/regions want to quantify
    #gtf:  /SAN/vyplab/vyplab_reference_genomes/annotation/human/ensembl/Homo_sapiens.GRCh38.100.gtf
    gtf:  /SAN/vyplab/NYGC_ALSFTD/analysis_nygc/nanopore.ds_extensions.known_utr_plus_distal_bins.gencode_v34.gtf


    # What is strandedness of data (super nice guide below)
    # https://littlebitofdata.com/en/2017/08/strandness_in_rnaseq/
    feature_counts_strand_info: "-s 0"

    #"pe" if paired-end data, "se" if single-end data
    # if using long read setting (long_reads = True), put se (I think...)
    end_type: "pe"

    # Count reads at What feature type?
    feature_type: "Name"

    # Count reads at 'feature' level (each exon) or for whole gene (put sth other than "feature")
    count_at: "feature"
    # What identifier in GTF to use for constructing meta-features if counting at the gene level
    # usually 'gene_id' is best
    attribute_type: "Name"

    # Use long reads (-L) setting
    # True if use, else False
    long_reads: False

    # No need to change this
    feature_counts_path: /SAN/vyplab/alb_projects/tools/subread-1.6.4-Linux-x86_64/bin/featureCounts


bedtools_coverage:
    bam_dir:  /SAN/vyplab/alb_projects/data/ward_bams/bam_files/

    # Pick out bams from bam_dir with this bam_suffix
    # Also used to strip from file to get sample name
    # e.g. Cont-B_S2.pass2Aligned.sortedByCoord.out.bam becomes Cont-B_S2
    bam_suffix: ".pass2Aligned.sortedByCoord.out.bam"

    bed_path: /SAN/vyplab/sbs_projects/data/nanopore/IPSC_TDP43_KD_direct_rna/all_downstream_strand_specific_intergenic_coverage/all_samples.downstream.all_bins.bed

    #Make sure trailing slash
    output_dir: /SAN/vyplab/sbs_projects/data/nanopore/IPSC_TDP43_KD_direct_rna/all_downstream_strand_specific_intergenic_coverage/

    #########---------------
    ## BEDTOOLS PARAMETERS
    #########---------------

    # If don't want to use these options, assign them to "" (unless told otherwise)

    # -s - only report hits overlapping on the same strand
    # -S - only report hits overlapping on opposite strands
    strandedness: "-s"

    # Report the depth at each position in each interval
    depth: "-d"

    # what operations to summarise coverage in each intervals from bed_path? All below are valid strings
    # sum, count, count_distinct, min, max, last
    # median, mode, antimode, stdev, sstdev, collapse
    # distinct, concat, freqasc, freqdesc, first, last
    # If just want per-base coverages, assign to an empty list with []
    operations: ["mean"]

    #1-based - which column should operation be performed on? (with depth = -d & a 6 col BED, this is the 8th column)
    operation_column: 8

    # No need to change these unless necessary

    sorted: "-sorted"
    bedtools_path: /SAN/vyplab/alb_projects/tools/bedtools
    samtools_path: /share/apps/genomics/samtools-1.9/bin/samtools


gtf_to_bed12:
    gtf: /SAN/vyplab/vyplab_reference_genomes/annotation/mouse/gencode/gencode.vM22.annotation.gtf
    bed12: /SAN/vyplab/vyplab_reference_genomes/annotation/mouse/gencode/gencode.vM22.annotation.bed12

    # Where to find gtfToGenePred & genePredToBed scripts
    # Make sure has a slash at end
    ucsc_tools_dir: /SAN/vyplab/alb_projects/tools/UCSC_Tools_Jul2020/

    # Where to put temporary/intermediate genePred file. Doesn't matter as long as space
    temp_gene_pred: /SAN/vyplab/vyplab_reference_genomes/annotation/mouse/gencode/temp.genePred
